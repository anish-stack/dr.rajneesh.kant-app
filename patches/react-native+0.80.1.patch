diff --git a/node_modules/react-native/ReactCommon/react/utils/hash_combine.h b/node_modules/react-native/ReactCommon/react/utils/hash_combine.h
index dab82ca..d31c4c2 100644
--- a/node_modules/react-native/ReactCommon/react/utils/hash_combine.h
+++ b/node_modules/react-native/ReactCommon/react/utils/hash_combine.h
@@ -1,33 +1,23 @@
-/*
- * Copyright (c) Meta Platforms, Inc. and affiliates.
- *
- * This source code is licensed under the MIT license found in the
- * LICENSE file in the root directory of this source tree.
- */
-
 #pragma once
 
+#include <cstddef>
 #include <functional>
-#include <type_traits>
 
-namespace facebook::react {
+namespace facebook {
+namespace react {
 
 template <typename T>
-concept Hashable = !std::is_same_v<T, const char*> && (requires(T a) {
-  { std::hash<T>{}(a) } -> std::convertible_to<std::size_t>;
-});
-
-template <Hashable T, Hashable... Rest>
-void hash_combine(std::size_t& seed, const T& v, const Rest&... rest) {
-  seed ^= std::hash<T>{}(v) + 0x9e3779b9 + (seed << 6) + (seed >> 2);
-  (hash_combine(seed, rest), ...);
+inline void hash_combine(std::size_t &seed, const T &val) {
+  seed ^= std::hash<T>{}(val) + 0x9e3779b9 + (seed << 6) + (seed >> 2);
 }
 
-template <Hashable T, Hashable... Args>
-std::size_t hash_combine(const T& v, const Args&... args) {
+template <typename T1, typename T2>
+inline std::size_t hash_combine(const T1 &v1, const T2 &v2) {
   std::size_t seed = 0;
-  hash_combine<T, Args...>(seed, v, args...);
+  hash_combine(seed, v1);
+  hash_combine(seed, v2);
   return seed;
 }
 
-} // namespace facebook::react
+} // namespace react
+} // namespace facebook
